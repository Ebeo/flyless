   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"port.c"
  21              	.Ltext0:
  22              		.cfi_sections	.debug_frame
  23              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  24              		.align	1
  25              		.global	pxPortInitialiseStack
  26              		.thumb
  27              		.thumb_func
  29              	pxPortInitialiseStack:
  30              	.LFB0:
  31              		.file 1 "firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c"
   1:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /*
   2:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     FreeRTOS V6.1.0 - Copyright (C) 2010 Real Time Engineers Ltd.
   3:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
   4:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     ***************************************************************************
   5:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     *                                                                         *
   6:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     * If you are:                                                             *
   7:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     *                                                                         *
   8:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     *    + New to FreeRTOS,                                                   *
   9:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     *    + Wanting to learn FreeRTOS or multitasking in general quickly       *
  10:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     *    + Looking for basic training,                                        *
  11:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     *    + Wanting to improve your FreeRTOS skills and productivity           *
  12:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     *                                                                         *
  13:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     * then take a look at the FreeRTOS books - available as PDF or paperback  *
  14:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     *                                                                         *
  15:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     *        "Using the FreeRTOS Real Time Kernel - a Practical Guide"        *
  16:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     *                  http://www.FreeRTOS.org/Documentation                  *
  17:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     *                                                                         *
  18:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     * A pdf reference manual is also available.  Both are usually delivered   *
  19:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     * to your inbox within 20 minutes to two hours when purchased between 8am *
  20:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     * and 8pm GMT (although please allow up to 24 hours in case of            *
  21:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     * exceptional circumstances).  Thank you for your support!                *
  22:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     *                                                                         *
  23:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     ***************************************************************************
  24:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
  25:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     This file is part of the FreeRTOS distribution.
  26:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
  27:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     ***NOTE*** The exception to the GPL is included to allow you to distribute
  31:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     a combined work that includes FreeRTOS without being obliged to provide the
  32:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     source code for proprietary components outside of the FreeRTOS kernel.
  33:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT
  34:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  35:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     more details. You should have received a copy of the GNU General Public 
  37:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it 
  38:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained 
  39:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     FreeRTOS WEB site.
  41:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
  42:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     1 tab == 4 spaces!
  43:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
  44:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     contact details.
  46:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
  47:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     critical systems.
  49:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
  50:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****     licensing and training services.
  52:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** */
  53:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
  54:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------
  55:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****  * Implementation of functions defined in portable.h for the ARM CM3 port.
  56:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****  *----------------------------------------------------------*/
  57:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
  58:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /* Scheduler includes. */
  59:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** #include "FreeRTOS.h"
  60:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** #include "task.h"
  61:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
  62:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  63:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** defined.  The value should also ensure backward compatibility.
  64:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  65:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  66:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  67:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** #endif
  68:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
  69:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /* Constants required to manipulate the NVIC. */
  70:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_CTRL		( ( volatile unsigned long *) 0xe000e010 )
  71:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_LOAD		( ( volatile unsigned long *) 0xe000e014 )
  72:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_INT_CTRL			( ( volatile unsigned long *) 0xe000ed04 )
  73:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSPRI2			( ( volatile unsigned long *) 0xe000ed20 )
  74:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_CLK		0x00000004
  75:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_INT		0x00000002
  76:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_ENABLE		0x00000001
  77:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_PENDSVSET			0x10000000
  78:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_PENDSV_PRI			( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 16 )
  79:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_PRI		( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 24 )
  80:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
  81:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /* Constants required to set up the initial stack. */
  82:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** #define portINITIAL_XPSR			( 0x01000000 )
  83:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
  84:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /* The priority used by the kernel is assigned to a variable to make access
  85:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** from inline assembler easier. */
  86:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** const unsigned long ulKernelPriority = configKERNEL_INTERRUPT_PRIORITY;
  87:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
  88:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /* Each task maintains its own interrupt status in the critical nesting
  89:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** variable. */
  90:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** static unsigned portBASE_TYPE uxCriticalNesting = 0xaaaaaaaa;
  91:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
  92:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /*
  93:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****  * Setup the timer to generate the tick interrupts.
  94:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****  */
  95:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** static void prvSetupTimerInterrupt( void );
  96:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
  97:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /*
  98:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****  * Exception handlers.
  99:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****  */
 100:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 101:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** void xPortSysTickHandler( void );
 102:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 103:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
 104:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /*
 105:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 106:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****  */
 107:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** void vPortStartFirstTask( void ) __attribute__ (( naked ));
 108:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
 109:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 110:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
 111:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /*
 112:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****  * See header file for description.
 113:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****  */
 114:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvPa
 115:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** {
  32              		.loc 1 115 0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 0
  35              		@ frame_needed = 0, uses_anonymous_args = 0
  36              	.LVL0:
  37 0000 10B5     		push	{r4, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
 116:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 117:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	interrupt. */
 118:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
  40              		.loc 1 118 0
  41 0002 031F     		subs	r3, r0, #4
  42              	.LVL1:
 119:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  43              		.loc 1 119 0
  44 0004 4FF08074 		mov	r4, #16777216
  45              		.cfi_offset 14, -4
  46              		.cfi_offset 4, -8
  47 0008 40F8044C 		str	r4, [r0, #-4]
  48              	.LVL2:
 120:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack--;
 121:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  49              		.loc 1 121 0
  50 000c 43F8041C 		str	r1, [r3, #-4]
 122:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack--;
 123:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = 0;	/* LR */
  51              		.loc 1 123 0
  52 0010 0021     		movs	r1, #0
  53              	.LVL3:
  54 0012 43F8081C 		str	r1, [r3, #-8]
 124:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 125:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  55              		.loc 1 125 0
  56 0016 43F81C2C 		str	r2, [r3, #-28]
 126:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 127:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
 128:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	return pxTopOfStack;
 129:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** }
  57              		.loc 1 129 0
  58 001a A3F13C00 		sub	r0, r3, #60
  59 001e 10BD     		pop	{r4, pc}
  60              		.cfi_endproc
  61              	.LFE0:
  63              		.section	.text.vPortSVCHandler,"ax",%progbits
  64              		.align	1
  65              		.global	vPortSVCHandler
  66              		.thumb
  67              		.thumb_func
  69              	vPortSVCHandler:
  70              	.LFB1:
 130:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 131:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
 132:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** void vPortSVCHandler( void )
 133:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** {
  71              		.loc 1 133 0
  72              		.cfi_startproc
  73              		@ Naked Function: prologue and epilogue provided by programmer.
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
 134:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	__asm volatile (
  76              		.loc 1 134 0
  77              	@ 134 "firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c" 1
  78 0000 064B     			ldr	r3, pxCurrentTCBConst2		
  79 0002 1968     		ldr r1, [r3]					
  80 0004 0868     		ldr r0, [r1]					
  81 0006 B0E8F00F 		ldmia r0!, {r4-r11}				
  82 000a 80F30988 		msr psp, r0						
  83 000e 4FF00000 		mov r0, #0 						
  84 0012 80F31188 		msr	basepri, r0					
  85 0016 4EF00D0E 		orr r14, #0xd					
  86 001a 7047     		bx r14							
  87              										
  88              		.align 2						
  89 001c 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
  90              	
  91              	@ 0 "" 2
 135:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 136:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 137:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 138:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 139:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 140:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 					"	mov r0, #0 						\n"
 141:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 					"	msr	basepri, r0					\n"
 142:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 					"	orr r14, #0xd					\n"
 143:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 					"	bx r14							\n"
 144:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 					"									\n"
 145:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 					"	.align 2						\n"
 146:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 147:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 				);
 148:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** }
  92              		.loc 1 148 0
  93              		.thumb
  94              		.cfi_endproc
  95              	.LFE1:
  97              		.section	.text.vPortStartFirstTask,"ax",%progbits
  98              		.align	1
  99              		.global	vPortStartFirstTask
 100              		.thumb
 101              		.thumb_func
 103              	vPortStartFirstTask:
 104              	.LFB2:
 149:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 150:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
 151:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** void vPortStartFirstTask( void )
 152:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** {
 105              		.loc 1 152 0
 106              		.cfi_startproc
 107              		@ Naked Function: prologue and epilogue provided by programmer.
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 153:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	__asm volatile(
 110              		.loc 1 153 0
 111              	@ 153 "firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c" 1
 112 0000 0248     		 ldr r0, =0xE000ED08 	
 113 0002 0068     	 ldr r0, [r0] 			
 114 0004 0068     	 ldr r0, [r0] 			
 115 0006 80F30888 	 msr msp, r0			
 116 000a 00DF     	 svc 0					
 117              	
 118              	@ 0 "" 2
 154:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 155:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 156:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 157:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 158:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 					" svc 0					\n" /* System call to start first task. */
 159:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 				);
 160:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** }
 119              		.loc 1 160 0
 120              		.thumb
 121              		.cfi_endproc
 122              	.LFE2:
 124              		.section	.text.xPortStartScheduler,"ax",%progbits
 125              		.align	1
 126              		.global	xPortStartScheduler
 127              		.thumb
 128              		.thumb_func
 130              	xPortStartScheduler:
 131              	.LFB3:
 161:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 162:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
 163:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /*
 164:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****  * See header file for description.
 165:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****  */
 166:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** portBASE_TYPE xPortStartScheduler( void )
 167:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** {
 132              		.loc 1 167 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 168:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
 169:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 136              		.loc 1 169 0
 137 0000 0B4B     		ldr	r3, .L5
 167:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** {
 138              		.loc 1 167 0
 139 0002 10B5     		push	{r4, lr}
 140              	.LCFI1:
 141              		.cfi_def_cfa_offset 8
 142              		.loc 1 169 0
 143 0004 1A68     		ldr	r2, [r3, #0]
 170:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 171:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
 172:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 173:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	here already. */
 174:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	prvSetupTimerInterrupt();
 175:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
 176:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 177:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	uxCriticalNesting = 0;
 144              		.loc 1 177 0
 145 0006 0024     		movs	r4, #0
 146              		.cfi_offset 14, -4
 147              		.cfi_offset 4, -8
 169:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 148              		.loc 1 169 0
 149 0008 42F47F02 		orr	r2, r2, #16711680
 150 000c 1A60     		str	r2, [r3, #0]
 170:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 151              		.loc 1 170 0
 152 000e 1A68     		ldr	r2, [r3, #0]
 153 0010 42F07F42 		orr	r2, r2, #-16777216
 154 0014 1A60     		str	r2, [r3, #0]
 155              	.LBB4:
 156              	.LBB5:
 178:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
 179:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	/* Start the first task. */
 180:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	vPortStartFirstTask();
 181:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
 182:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	/* Should not get here! */
 183:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	return 0;
 184:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** }
 185:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 186:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
 187:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** void vPortEndScheduler( void )
 188:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** {
 189:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	/* It is unlikely that the CM3 port will require this function as there
 190:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	is nothing to return to.  */
 191:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** }
 192:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 193:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
 194:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** void vPortYieldFromISR( void )
 195:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** {
 196:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	/* Set a PendSV to request a context switch. */
 197:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 198:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** }
 199:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 200:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
 201:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** void vPortEnterCritical( void )
 202:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** {
 203:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 204:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	uxCriticalNesting++;
 205:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** }
 206:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 207:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
 208:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** void vPortExitCritical( void )
 209:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** {
 210:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	uxCriticalNesting--;
 211:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	if( uxCriticalNesting == 0 )
 212:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	{
 213:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 		portENABLE_INTERRUPTS();
 214:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	}
 215:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** }
 216:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 217:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
 218:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** void xPortPendSVHandler( void )
 219:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** {
 220:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	/* This is a naked function. */
 221:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
 222:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	__asm volatile
 223:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	(
 224:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"	mrs r0, psp							\n"
 225:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 226:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 227:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldr	r2, [r3]						\n"
 228:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 229:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 230:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 231:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 232:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 233:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"	mov r0, %0							\n"
 234:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 235:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"	bl vTaskSwitchContext				\n"
 236:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"	mov r0, #0							\n"
 237:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 238:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 239:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"										\n"	/* Restore the context, including the critical nesting count. */
 240:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldr r1, [r3]						\n"
 241:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 242:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 243:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"	msr psp, r0							\n"
 244:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"	bx r14								\n"
 245:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 246:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"	.align 2							\n"
 247:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 248:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 249:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	);
 250:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** }
 251:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 252:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
 253:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** void xPortSysTickHandler( void )
 254:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** {
 255:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** unsigned long ulDummy;
 256:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
 257:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	/* If using preemption, also force a context switch. */
 258:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	#if configUSE_PREEMPTION == 1
 259:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 260:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	#endif
 261:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
 262:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 263:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	{
 264:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 		vTaskIncrementTick();
 265:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	}
 266:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 267:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** }
 268:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 269:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 
 270:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** /*
 271:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 272:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****  * frequency.
 273:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c ****  */
 274:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** void prvSetupTimerInterrupt( void )
 275:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** {
 276:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 277:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 157              		.loc 1 277 0
 158 0016 074B     		ldr	r3, .L5+4
 159 0018 4FF6FF12 		movw	r2, #63999
 160 001c 1A60     		str	r2, [r3, #0]
 278:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 161              		.loc 1 278 0
 162 001e 0722     		movs	r2, #7
 163 0020 43F8042C 		str	r2, [r3, #-4]
 164              	.LBE5:
 165              	.LBE4:
 177:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	uxCriticalNesting = 0;
 166              		.loc 1 177 0
 167 0024 044B     		ldr	r3, .L5+8
 168 0026 1C60     		str	r4, [r3, #0]
 180:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	vPortStartFirstTask();
 169              		.loc 1 180 0
 170 0028 FFF7FEFF 		bl	vPortStartFirstTask
 184:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** }
 171              		.loc 1 184 0
 172 002c 2046     		mov	r0, r4
 173 002e 10BD     		pop	{r4, pc}
 174              	.L6:
 175              		.align	2
 176              	.L5:
 177 0030 20ED00E0 		.word	-536810208
 178 0034 14E000E0 		.word	-536813548
 179 0038 00000000 		.word	.LANCHOR0
 180              		.cfi_endproc
 181              	.LFE3:
 183              		.section	.text.vPortEndScheduler,"ax",%progbits
 184              		.align	1
 185              		.global	vPortEndScheduler
 186              		.thumb
 187              		.thumb_func
 189              	vPortEndScheduler:
 190              	.LFB4:
 188:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** {
 191              		.loc 1 188 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 191:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** }
 196              		.loc 1 191 0
 197 0000 7047     		bx	lr
 198              		.cfi_endproc
 199              	.LFE4:
 201              		.section	.text.vPortYieldFromISR,"ax",%progbits
 202              		.align	1
 203              		.global	vPortYieldFromISR
 204              		.thumb
 205              		.thumb_func
 207              	vPortYieldFromISR:
 208              	.LFB5:
 195:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** {
 209              		.loc 1 195 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              		@ link register save eliminated.
 197:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 214              		.loc 1 197 0
 215 0000 024B     		ldr	r3, .L9
 216 0002 4FF08052 		mov	r2, #268435456
 217 0006 1A60     		str	r2, [r3, #0]
 198:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** }
 218              		.loc 1 198 0
 219 0008 7047     		bx	lr
 220              	.L10:
 221 000a 00BF     		.align	2
 222              	.L9:
 223 000c 04ED00E0 		.word	-536810236
 224              		.cfi_endproc
 225              	.LFE5:
 227              		.section	.text.vPortEnterCritical,"ax",%progbits
 228              		.align	1
 229              		.global	vPortEnterCritical
 230              		.thumb
 231              		.thumb_func
 233              	vPortEnterCritical:
 234              	.LFB6:
 202:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** {
 235              		.loc 1 202 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 0
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239              		@ link register save eliminated.
 203:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 240              		.loc 1 203 0
 241              	@ 203 "firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c" 1
 242 0000 4FF0BF00 			mov r0, #191								
 243 0004 80F31188 		msr basepri, r0							
 244              	
 245              	@ 0 "" 2
 204:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	uxCriticalNesting++;
 246              		.loc 1 204 0
 247              		.thumb
 248 0008 024B     		ldr	r3, .L12
 249 000a 1A68     		ldr	r2, [r3, #0]
 250 000c 0132     		adds	r2, r2, #1
 251 000e 1A60     		str	r2, [r3, #0]
 205:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** }
 252              		.loc 1 205 0
 253 0010 7047     		bx	lr
 254              	.L13:
 255 0012 00BF     		.align	2
 256              	.L12:
 257 0014 00000000 		.word	.LANCHOR0
 258              		.cfi_endproc
 259              	.LFE6:
 261              		.section	.text.vPortExitCritical,"ax",%progbits
 262              		.align	1
 263              		.global	vPortExitCritical
 264              		.thumb
 265              		.thumb_func
 267              	vPortExitCritical:
 268              	.LFB7:
 209:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** {
 269              		.loc 1 209 0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273              		@ link register save eliminated.
 210:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	uxCriticalNesting--;
 274              		.loc 1 210 0
 275 0000 044A     		ldr	r2, .L16
 276 0002 1368     		ldr	r3, [r2, #0]
 277 0004 013B     		subs	r3, r3, #1
 278 0006 1360     		str	r3, [r2, #0]
 211:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	if( uxCriticalNesting == 0 )
 279              		.loc 1 211 0
 280 0008 1BB9     		cbnz	r3, .L14
 213:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 		portENABLE_INTERRUPTS();
 281              		.loc 1 213 0
 282              	@ 213 "firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c" 1
 283 000a 4FF00000 			mov r0, #0					
 284 000e 80F31188 		msr basepri, r0				
 285              	
 286              	@ 0 "" 2
 287              		.thumb
 288              	.L14:
 289 0012 7047     		bx	lr
 290              	.L17:
 291              		.align	2
 292              	.L16:
 293 0014 00000000 		.word	.LANCHOR0
 294              		.cfi_endproc
 295              	.LFE7:
 297              		.section	.text.xPortPendSVHandler,"ax",%progbits
 298              		.align	1
 299              		.global	xPortPendSVHandler
 300              		.thumb
 301              		.thumb_func
 303              	xPortPendSVHandler:
 304              	.LFB8:
 219:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** {
 305              		.loc 1 219 0
 306              		.cfi_startproc
 307              		@ Naked Function: prologue and epilogue provided by programmer.
 308              		@ args = 0, pretend = 0, frame = 0
 309              		@ frame_needed = 0, uses_anonymous_args = 0
 222:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	__asm volatile
 310              		.loc 1 222 0
 311              	@ 222 "firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c" 1
 312 0000 EFF30980 			mrs r0, psp							
 313              											
 314 0004 0C4B     		ldr	r3, pxCurrentTCBConst			
 315 0006 1A68     		ldr	r2, [r3]						
 316              											
 317 0008 20E9F00F 		stmdb r0!, {r4-r11}					
 318 000c 1060     		str r0, [r2]						
 319              											
 320 000e 2DE90840 		stmdb sp!, {r3, r14}				
 321 0012 4FF0BF00 		mov r0, #191							
 322 0016 80F31188 		msr basepri, r0						
 323 001a FFF7FEFF 		bl vTaskSwitchContext				
 324 001e 4FF00000 		mov r0, #0							
 325 0022 80F31188 		msr basepri, r0						
 326 0026 BDE80840 		ldmia sp!, {r3, r14}				
 327              											
 328 002a 1968     		ldr r1, [r3]						
 329 002c 0868     		ldr r0, [r1]						
 330 002e B0E8F00F 		ldmia r0!, {r4-r11}					
 331 0032 80F30988 		msr psp, r0							
 332 0036 7047     		bx r14								
 333              											
 334              		.align 2							
 335 0038 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 336              	
 337              	@ 0 "" 2
 250:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** }
 338              		.loc 1 250 0
 339              		.thumb
 340              		.cfi_endproc
 341              	.LFE8:
 343              		.section	.text.xPortSysTickHandler,"ax",%progbits
 344              		.align	1
 345              		.global	xPortSysTickHandler
 346              		.thumb
 347              		.thumb_func
 349              	xPortSysTickHandler:
 350              	.LFB9:
 254:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** {
 351              		.loc 1 254 0
 352              		.cfi_startproc
 353              		@ args = 0, pretend = 0, frame = 0
 354              		@ frame_needed = 0, uses_anonymous_args = 0
 355 0000 08B5     		push	{r3, lr}
 356              	.LCFI2:
 357              		.cfi_def_cfa_offset 8
 259:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 358              		.loc 1 259 0
 359 0002 074B     		ldr	r3, .L20
 360              		.cfi_offset 14, -4
 361              		.cfi_offset 3, -8
 362 0004 4FF08052 		mov	r2, #268435456
 363 0008 1A60     		str	r2, [r3, #0]
 364              	.LVL4:
 262:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 365              		.loc 1 262 0
 366              	@ 262 "firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c" 1
 367 000a 4FF0BF00 			mov r0, #191								
 368 000e 80F31188 		msr basepri, r0							
 369              	
 370              	@ 0 "" 2
 264:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 		vTaskIncrementTick();
 371              		.loc 1 264 0
 372              		.thumb
 373 0012 FFF7FEFF 		bl	vTaskIncrementTick
 266:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 374              		.loc 1 266 0
 375              	@ 266 "firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c" 1
 376 0016 4FF00000 			mov r0, #0					
 377 001a 80F31188 		msr basepri, r0				
 378              	
 379              	@ 0 "" 2
 267:firmware/FreeRTOSV6.1.0/Source/portable/GCC/ARM_CM3/port.c **** }
 380              		.loc 1 267 0
 381              		.thumb
 382 001e 08BD     		pop	{r3, pc}
 383              	.L21:
 384              		.align	2
 385              	.L20:
 386 0020 04ED00E0 		.word	-536810236
 387              		.cfi_endproc
 388              	.LFE9:
 390              		.global	ulKernelPriority
 391              		.section	.rodata.ulKernelPriority,"a",%progbits
 392              		.align	2
 395              	ulKernelPriority:
 396 0000 FF000000 		.word	255
 397              		.section	.data.uxCriticalNesting,"aw",%progbits
 398              		.align	2
 399              		.set	.LANCHOR0,. + 0
 402              	uxCriticalNesting:
 403 0000 AAAAAAAA 		.word	-1431655766
 404              		.text
 405              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 port.c
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:24     .text.pxPortInitialiseStack:00000000 $t
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:29     .text.pxPortInitialiseStack:00000000 pxPortInitialiseStack
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:64     .text.vPortSVCHandler:00000000 $t
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:69     .text.vPortSVCHandler:00000000 vPortSVCHandler
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:89     .text.vPortSVCHandler:0000001c pxCurrentTCBConst2
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:89     .text.vPortSVCHandler:0000001c $d
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:98     .text.vPortStartFirstTask:00000000 $t
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:103    .text.vPortStartFirstTask:00000000 vPortStartFirstTask
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:125    .text.xPortStartScheduler:00000000 $t
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:130    .text.xPortStartScheduler:00000000 xPortStartScheduler
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:177    .text.xPortStartScheduler:00000030 $d
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:184    .text.vPortEndScheduler:00000000 $t
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:189    .text.vPortEndScheduler:00000000 vPortEndScheduler
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:202    .text.vPortYieldFromISR:00000000 $t
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:207    .text.vPortYieldFromISR:00000000 vPortYieldFromISR
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:223    .text.vPortYieldFromISR:0000000c $d
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:228    .text.vPortEnterCritical:00000000 $t
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:233    .text.vPortEnterCritical:00000000 vPortEnterCritical
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:257    .text.vPortEnterCritical:00000014 $d
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:262    .text.vPortExitCritical:00000000 $t
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:267    .text.vPortExitCritical:00000000 vPortExitCritical
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:293    .text.vPortExitCritical:00000014 $d
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:298    .text.xPortPendSVHandler:00000000 $t
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:303    .text.xPortPendSVHandler:00000000 xPortPendSVHandler
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:335    .text.xPortPendSVHandler:00000038 pxCurrentTCBConst
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:335    .text.xPortPendSVHandler:00000038 $d
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:344    .text.xPortSysTickHandler:00000000 $t
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:349    .text.xPortSysTickHandler:00000000 xPortSysTickHandler
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:386    .text.xPortSysTickHandler:00000020 $d
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:395    .rodata.ulKernelPriority:00000000 ulKernelPriority
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:392    .rodata.ulKernelPriority:00000000 $d
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:398    .data.uxCriticalNesting:00000000 $d
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:402    .data.uxCriticalNesting:00000000 uxCriticalNesting
C:\Users\MICHAE~1\AppData\Local\Temp\ccn9OzlA.s:124    .text.vPortStartFirstTask:0000000c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
vTaskIncrementTick
