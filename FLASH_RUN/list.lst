   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"list.c"
  21              	.Ltext0:
  22              		.cfi_sections	.debug_frame
  23              		.section	.text.vListInitialise,"ax",%progbits
  24              		.align	1
  25              		.global	vListInitialise
  26              		.thumb
  27              		.thumb_func
  29              	vListInitialise:
  30              	.LFB0:
  31              		.file 1 "firmware/FreeRTOSV6.1.0/Source/list.c"
   1:firmware/FreeRTOSV6.1.0/Source/list.c **** /*
   2:firmware/FreeRTOSV6.1.0/Source/list.c ****     FreeRTOS V6.1.0 - Copyright (C) 2010 Real Time Engineers Ltd.
   3:firmware/FreeRTOSV6.1.0/Source/list.c **** 
   4:firmware/FreeRTOSV6.1.0/Source/list.c ****     ***************************************************************************
   5:firmware/FreeRTOSV6.1.0/Source/list.c ****     *                                                                         *
   6:firmware/FreeRTOSV6.1.0/Source/list.c ****     * If you are:                                                             *
   7:firmware/FreeRTOSV6.1.0/Source/list.c ****     *                                                                         *
   8:firmware/FreeRTOSV6.1.0/Source/list.c ****     *    + New to FreeRTOS,                                                   *
   9:firmware/FreeRTOSV6.1.0/Source/list.c ****     *    + Wanting to learn FreeRTOS or multitasking in general quickly       *
  10:firmware/FreeRTOSV6.1.0/Source/list.c ****     *    + Looking for basic training,                                        *
  11:firmware/FreeRTOSV6.1.0/Source/list.c ****     *    + Wanting to improve your FreeRTOS skills and productivity           *
  12:firmware/FreeRTOSV6.1.0/Source/list.c ****     *                                                                         *
  13:firmware/FreeRTOSV6.1.0/Source/list.c ****     * then take a look at the FreeRTOS books - available as PDF or paperback  *
  14:firmware/FreeRTOSV6.1.0/Source/list.c ****     *                                                                         *
  15:firmware/FreeRTOSV6.1.0/Source/list.c ****     *        "Using the FreeRTOS Real Time Kernel - a Practical Guide"        *
  16:firmware/FreeRTOSV6.1.0/Source/list.c ****     *                  http://www.FreeRTOS.org/Documentation                  *
  17:firmware/FreeRTOSV6.1.0/Source/list.c ****     *                                                                         *
  18:firmware/FreeRTOSV6.1.0/Source/list.c ****     * A pdf reference manual is also available.  Both are usually delivered   *
  19:firmware/FreeRTOSV6.1.0/Source/list.c ****     * to your inbox within 20 minutes to two hours when purchased between 8am *
  20:firmware/FreeRTOSV6.1.0/Source/list.c ****     * and 8pm GMT (although please allow up to 24 hours in case of            *
  21:firmware/FreeRTOSV6.1.0/Source/list.c ****     * exceptional circumstances).  Thank you for your support!                *
  22:firmware/FreeRTOSV6.1.0/Source/list.c ****     *                                                                         *
  23:firmware/FreeRTOSV6.1.0/Source/list.c ****     ***************************************************************************
  24:firmware/FreeRTOSV6.1.0/Source/list.c **** 
  25:firmware/FreeRTOSV6.1.0/Source/list.c ****     This file is part of the FreeRTOS distribution.
  26:firmware/FreeRTOSV6.1.0/Source/list.c **** 
  27:firmware/FreeRTOSV6.1.0/Source/list.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:firmware/FreeRTOSV6.1.0/Source/list.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:firmware/FreeRTOSV6.1.0/Source/list.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:firmware/FreeRTOSV6.1.0/Source/list.c ****     ***NOTE*** The exception to the GPL is included to allow you to distribute
  31:firmware/FreeRTOSV6.1.0/Source/list.c ****     a combined work that includes FreeRTOS without being obliged to provide the
  32:firmware/FreeRTOSV6.1.0/Source/list.c ****     source code for proprietary components outside of the FreeRTOS kernel.
  33:firmware/FreeRTOSV6.1.0/Source/list.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT
  34:firmware/FreeRTOSV6.1.0/Source/list.c ****     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  35:firmware/FreeRTOSV6.1.0/Source/list.c ****     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:firmware/FreeRTOSV6.1.0/Source/list.c ****     more details. You should have received a copy of the GNU General Public 
  37:firmware/FreeRTOSV6.1.0/Source/list.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it 
  38:firmware/FreeRTOSV6.1.0/Source/list.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained 
  39:firmware/FreeRTOSV6.1.0/Source/list.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:firmware/FreeRTOSV6.1.0/Source/list.c ****     FreeRTOS WEB site.
  41:firmware/FreeRTOSV6.1.0/Source/list.c **** 
  42:firmware/FreeRTOSV6.1.0/Source/list.c ****     1 tab == 4 spaces!
  43:firmware/FreeRTOSV6.1.0/Source/list.c **** 
  44:firmware/FreeRTOSV6.1.0/Source/list.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:firmware/FreeRTOSV6.1.0/Source/list.c ****     contact details.
  46:firmware/FreeRTOSV6.1.0/Source/list.c **** 
  47:firmware/FreeRTOSV6.1.0/Source/list.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:firmware/FreeRTOSV6.1.0/Source/list.c ****     critical systems.
  49:firmware/FreeRTOSV6.1.0/Source/list.c **** 
  50:firmware/FreeRTOSV6.1.0/Source/list.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:firmware/FreeRTOSV6.1.0/Source/list.c ****     licensing and training services.
  52:firmware/FreeRTOSV6.1.0/Source/list.c **** */
  53:firmware/FreeRTOSV6.1.0/Source/list.c **** 
  54:firmware/FreeRTOSV6.1.0/Source/list.c **** 
  55:firmware/FreeRTOSV6.1.0/Source/list.c **** #include <stdlib.h>
  56:firmware/FreeRTOSV6.1.0/Source/list.c **** #include "FreeRTOS.h"
  57:firmware/FreeRTOSV6.1.0/Source/list.c **** #include "list.h"
  58:firmware/FreeRTOSV6.1.0/Source/list.c **** 
  59:firmware/FreeRTOSV6.1.0/Source/list.c **** /*-----------------------------------------------------------
  60:firmware/FreeRTOSV6.1.0/Source/list.c ****  * PUBLIC LIST API documented in list.h
  61:firmware/FreeRTOSV6.1.0/Source/list.c ****  *----------------------------------------------------------*/
  62:firmware/FreeRTOSV6.1.0/Source/list.c **** 
  63:firmware/FreeRTOSV6.1.0/Source/list.c **** void vListInitialise( xList *pxList )
  64:firmware/FreeRTOSV6.1.0/Source/list.c **** {
  32              		.loc 1 64 0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 0
  35              		@ frame_needed = 0, uses_anonymous_args = 0
  36              		@ link register save eliminated.
  37              	.LVL0:
  65:firmware/FreeRTOSV6.1.0/Source/list.c **** 	/* The list structure contains a list item which is used to mark the
  66:firmware/FreeRTOSV6.1.0/Source/list.c **** 	end of the list.  To initialise the list the list end is inserted
  67:firmware/FreeRTOSV6.1.0/Source/list.c **** 	as the only list entry. */
  68:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  38              		.loc 1 68 0
  39 0000 00F10803 		add	r3, r0, #8
  69:firmware/FreeRTOSV6.1.0/Source/list.c **** 
  70:firmware/FreeRTOSV6.1.0/Source/list.c **** 	/* The list end value is the highest possible value in the list to
  71:firmware/FreeRTOSV6.1.0/Source/list.c **** 	ensure it remains at the end of the list. */
  72:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40              		.loc 1 72 0
  41 0004 4FF0FF32 		mov	r2, #-1
  42 0008 8260     		str	r2, [r0, #8]
  68:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  43              		.loc 1 68 0
  44 000a 4360     		str	r3, [r0, #4]
  73:firmware/FreeRTOSV6.1.0/Source/list.c **** 
  74:firmware/FreeRTOSV6.1.0/Source/list.c **** 	/* The list end next and previous pointers point to itself so we know
  75:firmware/FreeRTOSV6.1.0/Source/list.c **** 	when the list is empty. */
  76:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  45              		.loc 1 76 0
  46 000c C360     		str	r3, [r0, #12]
  77:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  47              		.loc 1 77 0
  48 000e 0361     		str	r3, [r0, #16]
  78:firmware/FreeRTOSV6.1.0/Source/list.c **** 
  79:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxList->uxNumberOfItems = 0;
  49              		.loc 1 79 0
  50 0010 0023     		movs	r3, #0
  51 0012 0360     		str	r3, [r0, #0]
  80:firmware/FreeRTOSV6.1.0/Source/list.c **** }
  52              		.loc 1 80 0
  53 0014 7047     		bx	lr
  54              		.cfi_endproc
  55              	.LFE0:
  57              		.section	.text.vListInitialiseItem,"ax",%progbits
  58              		.align	1
  59              		.global	vListInitialiseItem
  60              		.thumb
  61              		.thumb_func
  63              	vListInitialiseItem:
  64              	.LFB1:
  81:firmware/FreeRTOSV6.1.0/Source/list.c **** /*-----------------------------------------------------------*/
  82:firmware/FreeRTOSV6.1.0/Source/list.c **** 
  83:firmware/FreeRTOSV6.1.0/Source/list.c **** void vListInitialiseItem( xListItem *pxItem )
  84:firmware/FreeRTOSV6.1.0/Source/list.c **** {
  65              		.loc 1 84 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		@ link register save eliminated.
  70              	.LVL1:
  85:firmware/FreeRTOSV6.1.0/Source/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
  86:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxItem->pvContainer = NULL;
  71              		.loc 1 86 0
  72 0000 0023     		movs	r3, #0
  73 0002 0361     		str	r3, [r0, #16]
  87:firmware/FreeRTOSV6.1.0/Source/list.c **** }
  74              		.loc 1 87 0
  75 0004 7047     		bx	lr
  76              		.cfi_endproc
  77              	.LFE1:
  79              		.section	.text.vListInsertEnd,"ax",%progbits
  80              		.align	1
  81              		.global	vListInsertEnd
  82              		.thumb
  83              		.thumb_func
  85              	vListInsertEnd:
  86              	.LFB2:
  88:firmware/FreeRTOSV6.1.0/Source/list.c **** /*-----------------------------------------------------------*/
  89:firmware/FreeRTOSV6.1.0/Source/list.c **** 
  90:firmware/FreeRTOSV6.1.0/Source/list.c **** void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
  91:firmware/FreeRTOSV6.1.0/Source/list.c **** {
  87              		.loc 1 91 0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		@ link register save eliminated.
  92              	.LVL2:
  92:firmware/FreeRTOSV6.1.0/Source/list.c **** volatile xListItem * pxIndex;
  93:firmware/FreeRTOSV6.1.0/Source/list.c **** 
  94:firmware/FreeRTOSV6.1.0/Source/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
  95:firmware/FreeRTOSV6.1.0/Source/list.c **** 	makes the new list item the last item to be removed by a call to
  96:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
  97:firmware/FreeRTOSV6.1.0/Source/list.c **** 	the pxIndex member. */
  98:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxIndex = pxList->pxIndex;
  93              		.loc 1 98 0
  94 0000 4368     		ldr	r3, [r0, #4]
  95              	.LVL3:
  99:firmware/FreeRTOSV6.1.0/Source/list.c **** 
 100:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxNewListItem->pxNext = pxIndex->pxNext;
  96              		.loc 1 100 0
  97 0002 5A68     		ldr	r2, [r3, #4]
 101:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxNewListItem->pxPrevious = pxList->pxIndex;
  98              		.loc 1 101 0
  99 0004 8B60     		str	r3, [r1, #8]
 100:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxNewListItem->pxNext = pxIndex->pxNext;
 100              		.loc 1 100 0
 101 0006 4A60     		str	r2, [r1, #4]
 102:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 102              		.loc 1 102 0
 103 0008 5A68     		ldr	r2, [r3, #4]
 104 000a 9160     		str	r1, [r2, #8]
 103:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 105              		.loc 1 103 0
 106 000c 5960     		str	r1, [r3, #4]
 104:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 107              		.loc 1 104 0
 108 000e 4160     		str	r1, [r0, #4]
 105:firmware/FreeRTOSV6.1.0/Source/list.c **** 
 106:firmware/FreeRTOSV6.1.0/Source/list.c **** 	/* Remember which list the item is in. */
 107:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 109              		.loc 1 107 0
 110 0010 0861     		str	r0, [r1, #16]
 108:firmware/FreeRTOSV6.1.0/Source/list.c **** 
 109:firmware/FreeRTOSV6.1.0/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 111              		.loc 1 109 0
 112 0012 0368     		ldr	r3, [r0, #0]
 113 0014 0133     		adds	r3, r3, #1
 114 0016 0360     		str	r3, [r0, #0]
 110:firmware/FreeRTOSV6.1.0/Source/list.c **** }
 115              		.loc 1 110 0
 116 0018 7047     		bx	lr
 117              		.cfi_endproc
 118              	.LFE2:
 120              		.section	.text.vListInsert,"ax",%progbits
 121              		.align	1
 122              		.global	vListInsert
 123              		.thumb
 124              		.thumb_func
 126              	vListInsert:
 127              	.LFB3:
 111:firmware/FreeRTOSV6.1.0/Source/list.c **** /*-----------------------------------------------------------*/
 112:firmware/FreeRTOSV6.1.0/Source/list.c **** 
 113:firmware/FreeRTOSV6.1.0/Source/list.c **** void vListInsert( xList *pxList, xListItem *pxNewListItem )
 114:firmware/FreeRTOSV6.1.0/Source/list.c **** {
 128              		.loc 1 114 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              	.LVL4:
 115:firmware/FreeRTOSV6.1.0/Source/list.c **** volatile xListItem *pxIterator;
 116:firmware/FreeRTOSV6.1.0/Source/list.c **** portTickType xValueOfInsertion;
 117:firmware/FreeRTOSV6.1.0/Source/list.c **** 
 118:firmware/FreeRTOSV6.1.0/Source/list.c **** 	/* Insert the new list item into the list, sorted in ulListItem order. */
 119:firmware/FreeRTOSV6.1.0/Source/list.c **** 	xValueOfInsertion = pxNewListItem->xItemValue;
 133              		.loc 1 119 0
 134 0000 0A68     		ldr	r2, [r1, #0]
 135              	.LVL5:
 114:firmware/FreeRTOSV6.1.0/Source/list.c **** {
 136              		.loc 1 114 0
 137 0002 10B5     		push	{r4, lr}
 138              	.LCFI0:
 139              		.cfi_def_cfa_offset 8
 120:firmware/FreeRTOSV6.1.0/Source/list.c **** 
 121:firmware/FreeRTOSV6.1.0/Source/list.c **** 	/* If the list already contains a list item with the same item value then
 122:firmware/FreeRTOSV6.1.0/Source/list.c **** 	the new list item should be placed after it.  This ensures that TCB's which
 123:firmware/FreeRTOSV6.1.0/Source/list.c **** 	are stored in ready lists (all of which have the same ulListItem value)
 124:firmware/FreeRTOSV6.1.0/Source/list.c **** 	get an equal share of the CPU.  However, if the xItemValue is the same as 
 125:firmware/FreeRTOSV6.1.0/Source/list.c **** 	the back marker the iteration loop below will not end.  This means we need
 126:firmware/FreeRTOSV6.1.0/Source/list.c **** 	to guard against this by checking the value first and modifying the 
 127:firmware/FreeRTOSV6.1.0/Source/list.c **** 	algorithm slightly if necessary. */
 128:firmware/FreeRTOSV6.1.0/Source/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 140              		.loc 1 128 0
 141 0004 B2F1FF3F 		cmp	r2, #-1
 142 0008 01D1     		bne	.L5
 143              		.cfi_offset 14, -4
 144              		.cfi_offset 4, -8
 129:firmware/FreeRTOSV6.1.0/Source/list.c **** 	{
 130:firmware/FreeRTOSV6.1.0/Source/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 145              		.loc 1 130 0
 146 000a 0369     		ldr	r3, [r0, #16]
 147              	.LVL6:
 148 000c 07E0     		b	.L6
 149              	.LVL7:
 150              	.L5:
 131:firmware/FreeRTOSV6.1.0/Source/list.c **** 	}
 132:firmware/FreeRTOSV6.1.0/Source/list.c **** 	else
 133:firmware/FreeRTOSV6.1.0/Source/list.c **** 	{
 134:firmware/FreeRTOSV6.1.0/Source/list.c **** 		/* *** NOTE ***********************************************************
 135:firmware/FreeRTOSV6.1.0/Source/list.c **** 		If you find your application is crashing here then likely causes are:
 136:firmware/FreeRTOSV6.1.0/Source/list.c **** 			1) Stack overflow - 
 137:firmware/FreeRTOSV6.1.0/Source/list.c **** 			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
 138:firmware/FreeRTOSV6.1.0/Source/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex M3 
 139:firmware/FreeRTOSV6.1.0/Source/list.c **** 			   parts where numerically high priority values denote low actual 
 140:firmware/FreeRTOSV6.1.0/Source/list.c **** 			   interrupt priories, which can seem counter intuitive.  See 
 141:firmware/FreeRTOSV6.1.0/Source/list.c **** 			   configMAX_SYSCALL_INTERRUPT_PRIORITY on http://www.freertos.org/a00110.html
 142:firmware/FreeRTOSV6.1.0/Source/list.c **** 			3) Calling an API function from within a critical section or when
 143:firmware/FreeRTOSV6.1.0/Source/list.c **** 			   the scheduler is suspended.
 144:firmware/FreeRTOSV6.1.0/Source/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 145:firmware/FreeRTOSV6.1.0/Source/list.c **** 			   before the scheduler has been started (are interrupts firing
 146:firmware/FreeRTOSV6.1.0/Source/list.c **** 			   before vTaskStartScheduler() has been called?).
 147:firmware/FreeRTOSV6.1.0/Source/list.c **** 		See http://www.freertos.org/FAQHelp.html for more tips. 
 148:firmware/FreeRTOSV6.1.0/Source/list.c **** 		**********************************************************************/
 149:firmware/FreeRTOSV6.1.0/Source/list.c **** 		
 150:firmware/FreeRTOSV6.1.0/Source/list.c **** 		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValue
 151              		.loc 1 150 0
 152 000e 00F10803 		add	r3, r0, #8
 153              	.LVL8:
 154 0012 00E0     		b	.L7
 155              	.L8:
 156              		.loc 1 150 0 is_stmt 0 discriminator 2
 157 0014 5B68     		ldr	r3, [r3, #4]
 158              	.LVL9:
 159              	.L7:
 160              		.loc 1 150 0 discriminator 1
 161 0016 5C68     		ldr	r4, [r3, #4]
 162 0018 2468     		ldr	r4, [r4, #0]
 163 001a 9442     		cmp	r4, r2
 164 001c FAD9     		bls	.L8
 165              	.L6:
 151:firmware/FreeRTOSV6.1.0/Source/list.c **** 		{
 152:firmware/FreeRTOSV6.1.0/Source/list.c **** 			/* There is nothing to do here, we are just iterating to the
 153:firmware/FreeRTOSV6.1.0/Source/list.c **** 			wanted insertion position. */
 154:firmware/FreeRTOSV6.1.0/Source/list.c **** 		}
 155:firmware/FreeRTOSV6.1.0/Source/list.c **** 	}
 156:firmware/FreeRTOSV6.1.0/Source/list.c **** 
 157:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 166              		.loc 1 157 0 is_stmt 1
 167 001e 5A68     		ldr	r2, [r3, #4]
 158:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 159:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 160:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 161:firmware/FreeRTOSV6.1.0/Source/list.c **** 
 162:firmware/FreeRTOSV6.1.0/Source/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 163:firmware/FreeRTOSV6.1.0/Source/list.c **** 	item later. */
 164:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 168              		.loc 1 164 0
 169 0020 0861     		str	r0, [r1, #16]
 158:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 170              		.loc 1 158 0
 171 0022 9160     		str	r1, [r2, #8]
 157:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 172              		.loc 1 157 0
 173 0024 4A60     		str	r2, [r1, #4]
 159:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 174              		.loc 1 159 0
 175 0026 8B60     		str	r3, [r1, #8]
 160:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 176              		.loc 1 160 0
 177 0028 5960     		str	r1, [r3, #4]
 165:firmware/FreeRTOSV6.1.0/Source/list.c **** 
 166:firmware/FreeRTOSV6.1.0/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 178              		.loc 1 166 0
 179 002a 0368     		ldr	r3, [r0, #0]
 180              	.LVL10:
 181 002c 0133     		adds	r3, r3, #1
 182 002e 0360     		str	r3, [r0, #0]
 167:firmware/FreeRTOSV6.1.0/Source/list.c **** }
 183              		.loc 1 167 0
 184 0030 10BD     		pop	{r4, pc}
 185              		.cfi_endproc
 186              	.LFE3:
 188              		.section	.text.vListRemove,"ax",%progbits
 189              		.align	1
 190              		.global	vListRemove
 191              		.thumb
 192              		.thumb_func
 194              	vListRemove:
 195              	.LFB4:
 168:firmware/FreeRTOSV6.1.0/Source/list.c **** /*-----------------------------------------------------------*/
 169:firmware/FreeRTOSV6.1.0/Source/list.c **** 
 170:firmware/FreeRTOSV6.1.0/Source/list.c **** void vListRemove( xListItem *pxItemToRemove )
 171:firmware/FreeRTOSV6.1.0/Source/list.c **** {
 196              		.loc 1 171 0
 197              		.cfi_startproc
 198              		@ args = 0, pretend = 0, frame = 0
 199              		@ frame_needed = 0, uses_anonymous_args = 0
 200              		@ link register save eliminated.
 201              	.LVL11:
 172:firmware/FreeRTOSV6.1.0/Source/list.c **** xList * pxList;
 173:firmware/FreeRTOSV6.1.0/Source/list.c **** 
 174:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 202              		.loc 1 174 0
 203 0000 4368     		ldr	r3, [r0, #4]
 204 0002 8268     		ldr	r2, [r0, #8]
 205 0004 9A60     		str	r2, [r3, #8]
 175:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 206              		.loc 1 175 0
 207 0006 8268     		ldr	r2, [r0, #8]
 208 0008 5360     		str	r3, [r2, #4]
 176:firmware/FreeRTOSV6.1.0/Source/list.c **** 	
 177:firmware/FreeRTOSV6.1.0/Source/list.c **** 	/* The list item knows which list it is in.  Obtain the list from the list
 178:firmware/FreeRTOSV6.1.0/Source/list.c **** 	item. */
 179:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxList = ( xList * ) pxItemToRemove->pvContainer;
 209              		.loc 1 179 0
 210 000a 0369     		ldr	r3, [r0, #16]
 211              	.LVL12:
 180:firmware/FreeRTOSV6.1.0/Source/list.c **** 
 181:firmware/FreeRTOSV6.1.0/Source/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 182:firmware/FreeRTOSV6.1.0/Source/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 212              		.loc 1 182 0
 213 000c 5968     		ldr	r1, [r3, #4]
 214 000e 8142     		cmp	r1, r0
 183:firmware/FreeRTOSV6.1.0/Source/list.c **** 	{
 184:firmware/FreeRTOSV6.1.0/Source/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 215              		.loc 1 184 0
 216 0010 08BF     		it	eq
 217 0012 5A60     		streq	r2, [r3, #4]
 185:firmware/FreeRTOSV6.1.0/Source/list.c **** 	}
 186:firmware/FreeRTOSV6.1.0/Source/list.c **** 
 187:firmware/FreeRTOSV6.1.0/Source/list.c **** 	pxItemToRemove->pvContainer = NULL;
 218              		.loc 1 187 0
 219 0014 0022     		movs	r2, #0
 220 0016 0261     		str	r2, [r0, #16]
 188:firmware/FreeRTOSV6.1.0/Source/list.c **** 	( pxList->uxNumberOfItems )--;
 221              		.loc 1 188 0
 222 0018 1A68     		ldr	r2, [r3, #0]
 223 001a 013A     		subs	r2, r2, #1
 224 001c 1A60     		str	r2, [r3, #0]
 189:firmware/FreeRTOSV6.1.0/Source/list.c **** }
 225              		.loc 1 189 0
 226 001e 7047     		bx	lr
 227              		.cfi_endproc
 228              	.LFE4:
 230              		.text
 231              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 list.c
C:\Users\MICHAE~1\AppData\Local\Temp\ccQvS7K4.s:24     .text.vListInitialise:00000000 $t
C:\Users\MICHAE~1\AppData\Local\Temp\ccQvS7K4.s:29     .text.vListInitialise:00000000 vListInitialise
C:\Users\MICHAE~1\AppData\Local\Temp\ccQvS7K4.s:58     .text.vListInitialiseItem:00000000 $t
C:\Users\MICHAE~1\AppData\Local\Temp\ccQvS7K4.s:63     .text.vListInitialiseItem:00000000 vListInitialiseItem
C:\Users\MICHAE~1\AppData\Local\Temp\ccQvS7K4.s:80     .text.vListInsertEnd:00000000 $t
C:\Users\MICHAE~1\AppData\Local\Temp\ccQvS7K4.s:85     .text.vListInsertEnd:00000000 vListInsertEnd
C:\Users\MICHAE~1\AppData\Local\Temp\ccQvS7K4.s:121    .text.vListInsert:00000000 $t
C:\Users\MICHAE~1\AppData\Local\Temp\ccQvS7K4.s:126    .text.vListInsert:00000000 vListInsert
C:\Users\MICHAE~1\AppData\Local\Temp\ccQvS7K4.s:189    .text.vListRemove:00000000 $t
C:\Users\MICHAE~1\AppData\Local\Temp\ccQvS7K4.s:194    .text.vListRemove:00000000 vListRemove
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
